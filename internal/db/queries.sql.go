// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createSchema = `-- name: CreateSchema :exec
INSERT INTO entity_schemas (
    id, name, description, fields, indexes
) VALUES (?, ?, ?, ?, ?)
`

type CreateSchemaParams struct {
	ID          string
	Name        string
	Description sql.NullString
	Fields      string
	Indexes     sql.NullString
}

func (q *Queries) CreateSchema(ctx context.Context, arg CreateSchemaParams) error {
	_, err := q.db.ExecContext(ctx, createSchema,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Fields,
		arg.Indexes,
	)
	return err
}

const getSchema = `-- name: GetSchema :one
SELECT id, name, description, fields, indexes, created_at, updated_at, deleted_at FROM entity_schemas
WHERE name = ? AND deleted_at IS NULL
`

func (q *Queries) GetSchema(ctx context.Context, name string) (EntitySchema, error) {
	row := q.db.QueryRowContext(ctx, getSchema, name)
	var i EntitySchema
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Fields,
		&i.Indexes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listSchemas = `-- name: ListSchemas :many
SELECT id, name, description, fields, indexes, created_at, updated_at, deleted_at FROM entity_schemas
WHERE deleted_at IS NULL
`

func (q *Queries) ListSchemas(ctx context.Context) ([]EntitySchema, error) {
	rows, err := q.db.QueryContext(ctx, listSchemas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EntitySchema
	for rows.Next() {
		var i EntitySchema
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Fields,
			&i.Indexes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteSchema = `-- name: SoftDeleteSchema :exec
UPDATE entity_schemas
SET deleted_at = CURRENT_TIMESTAMP
WHERE name = ? AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteSchema(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, softDeleteSchema, name)
	return err
}

const updateSchema = `-- name: UpdateSchema :exec
UPDATE entity_schemas
SET description = ?,
    fields = ?,
    indexes = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE name = ? AND deleted_at IS NULL
`

type UpdateSchemaParams struct {
	Description sql.NullString
	Fields      string
	Indexes     sql.NullString
	Name        string
}

func (q *Queries) UpdateSchema(ctx context.Context, arg UpdateSchemaParams) error {
	_, err := q.db.ExecContext(ctx, updateSchema,
		arg.Description,
		arg.Fields,
		arg.Indexes,
		arg.Name,
	)
	return err
}
